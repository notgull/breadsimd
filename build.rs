// Copyright John Nunley, 2022.
//
// This software is distributed under the Boost Software License Version 1.0 and the Apache
// 2.0 License, at your option. See the `LICENSE-BOOST` and `LICENSE-APACHE` files in the
// root of this repository for the full text of the licenses.
//
// --------------------------------------------------------------------------------------------
//
//  Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE-BOOST or copy at
//        https://www.boost.org/LICENSE_1_0.txt)
//
// --------------------------------------------------------------------------------------------
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! The build flags generated by this script are not public API.

use std::env;
use std::process::Command;

fn main() {
    // Run rustc to get the version.
    let rustc_path = env::var_os("RUSTC").unwrap_or_else(|| "rustc".into());
    let rustc_command = Command::new(rustc_path)
        .arg("--version")
        .arg("--verbose")
        .output();

    let assume_not_nightly = match rustc_command {
        Ok(output) => {
            if !output.status.success() {
                println!(
                    "cargo:warning=async-io: rustc failed with error code {}",
                    output.status.code().unwrap_or(0)
                );

                true
            } else {
                let version = String::from_utf8_lossy(&output.stdout);

                // Quick and dirty: Don't set the flag if we don't detect the string "nightly".
                !version.contains("nightly")
            }
        }
        Err(err) => {
            // Notify the user of the warning.
            println!(
                "cargo:warning=breadsimd: failed to detect compiler version: {}",
                err
            );

            true
        }
    };

    if assume_not_nightly {
        // We set the inverse flag here for compatibility with non-Cargo build
        // systems. In this case, if the flag is not set, we assume that we are
        // running on a non-nightly system and just fall back to basic primitives.
        println!("cargo:rustc-cfg=breadsimd_no_nightly");
    }
}
